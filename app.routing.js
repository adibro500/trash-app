"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var items_component_1 = require("./item/items.component");
var item_detail_component_1 = require("./item/item-detail.component");
var login_component_1 = require("~/login/login.component");
var player_registration_component_1 = require("~/player-registration/player-registration.component");
var player_registration_address_component_1 = require("~/player-registration-address/player-registration-address.component");
var confirm_register_component_1 = require("~/confirm-register/confirm-register.component");
var routes = [
    { path: "", component: login_component_1.LoginComponent },
    { path: "player-register", component: player_registration_component_1.PlayerRegistrationComponent },
    { path: "player-register-address", component: player_registration_address_component_1.PlayerRegistrationAddressComponent },
    { path: "registration", component: confirm_register_component_1.ConfirmRegisterComponent },
    // { path: 'map', component: MapComponent },
    { path: 'tournament-list', component: items_component_1.ItemsComponent },
    // { path: 'cards', component: CardsComponent },
    { path: "item/:tournament_ref", component: item_detail_component_1.ItemDetailComponent }
    // { path: "weather", component: WeatherMainComponent }
];
var AppRoutingModule = /** @class */ (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = __decorate([
        core_1.NgModule({
            imports: [router_1.NativeScriptRouterModule.forRoot(routes)],
            exports: [router_1.NativeScriptRouterModule]
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());
exports.AppRoutingModule = AppRoutingModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLnJvdXRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHAucm91dGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUF5QztBQUN6QyxzREFBdUU7QUFHdkUsMERBQXdEO0FBQ3hELHNFQUFtRTtBQUNuRSwyREFBeUQ7QUFFekQscUdBQWtHO0FBQ2xHLDZIQUF5SDtBQUl6SCw0RkFBeUY7QUFFekYsSUFBTSxNQUFNLEdBQVc7SUFDbkIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxnQ0FBYyxFQUFFO0lBQ3ZDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSwyREFBMkIsRUFBRTtJQUNuRSxFQUFFLElBQUksRUFBRSx5QkFBeUIsRUFBRSxTQUFTLEVBQUUsMEVBQWtDLEVBQUU7SUFDbEYsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxxREFBd0IsRUFBRTtJQUM3RCw0Q0FBNEM7SUFDNUMsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLGdDQUFjLEVBQUU7SUFDdEQsZ0RBQWdEO0lBQ2hELEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFLFNBQVMsRUFBRSwyQ0FBbUIsRUFBRTtJQUNoRSx1REFBdUQ7Q0FDMUQsQ0FBQztBQU1GO0lBQUE7SUFBZ0MsQ0FBQztJQUFwQixnQkFBZ0I7UUFKNUIsZUFBUSxDQUFDO1lBQ04sT0FBTyxFQUFFLENBQUMsaUNBQXdCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25ELE9BQU8sRUFBRSxDQUFDLGlDQUF3QixDQUFDO1NBQ3RDLENBQUM7T0FDVyxnQkFBZ0IsQ0FBSTtJQUFELHVCQUFDO0NBQUEsQUFBakMsSUFBaUM7QUFBcEIsNENBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgUm91dGVzIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuXG5pbXBvcnQgeyBJdGVtc0NvbXBvbmVudCB9IGZyb20gXCIuL2l0ZW0vaXRlbXMuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBJdGVtRGV0YWlsQ29tcG9uZW50IH0gZnJvbSBcIi4vaXRlbS9pdGVtLWRldGFpbC5jb21wb25lbnRcIjtcbmltcG9ydCB7IExvZ2luQ29tcG9uZW50IH0gZnJvbSBcIn4vbG9naW4vbG9naW4uY29tcG9uZW50XCI7XG5pbXBvcnQgeyBSZWdpc3RyYXRpb25Db21wb25lbnQgfSBmcm9tIFwifi9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUGxheWVyUmVnaXN0cmF0aW9uQ29tcG9uZW50IH0gZnJvbSBcIn4vcGxheWVyLXJlZ2lzdHJhdGlvbi9wbGF5ZXItcmVnaXN0cmF0aW9uLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgUGxheWVyUmVnaXN0cmF0aW9uQWRkcmVzc0NvbXBvbmVudCB9IGZyb20gXCJ+L3BsYXllci1yZWdpc3RyYXRpb24tYWRkcmVzcy9wbGF5ZXItcmVnaXN0cmF0aW9uLWFkZHJlc3MuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBNYXBDb21wb25lbnQgfSBmcm9tIFwifi9tYXAvbWFwLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgQ2FyZHNDb21wb25lbnQgfSBmcm9tIFwifi9jYXJkcy9jYXJkcy5jb21wb25lbnRcIjtcbmltcG9ydCB7IFdlYXRoZXJNYWluQ29tcG9uZW50IH0gZnJvbSBcIn4vd2VhdGhlci1tYWluL3dlYXRoZXItbWFpbi5jb21wb25lbnRcIjtcbmltcG9ydCB7IENvbmZpcm1SZWdpc3RlckNvbXBvbmVudCB9IGZyb20gXCJ+L2NvbmZpcm0tcmVnaXN0ZXIvY29uZmlybS1yZWdpc3Rlci5jb21wb25lbnRcIjtcblxuY29uc3Qgcm91dGVzOiBSb3V0ZXMgPSBbXG4gICAgeyBwYXRoOiBcIlwiLCBjb21wb25lbnQ6IExvZ2luQ29tcG9uZW50IH0sLy9jb21wb25lbnQ6IFBsYXllclJlZ2lzdHJhdGlvbkNvbXBvbmVudCB9LC8vIHJlZGlyZWN0VG86IFwiL2l0ZW1zXCIsIHBhdGhNYXRjaDogXCJmdWxsXCIgfSxcbiAgICB7IHBhdGg6IFwicGxheWVyLXJlZ2lzdGVyXCIsIGNvbXBvbmVudDogUGxheWVyUmVnaXN0cmF0aW9uQ29tcG9uZW50IH0sXG4gICAgeyBwYXRoOiBcInBsYXllci1yZWdpc3Rlci1hZGRyZXNzXCIsIGNvbXBvbmVudDogUGxheWVyUmVnaXN0cmF0aW9uQWRkcmVzc0NvbXBvbmVudCB9LFxuICAgIHsgcGF0aDogXCJyZWdpc3RyYXRpb25cIiwgY29tcG9uZW50OiBDb25maXJtUmVnaXN0ZXJDb21wb25lbnQgfSxcbiAgICAvLyB7IHBhdGg6ICdtYXAnLCBjb21wb25lbnQ6IE1hcENvbXBvbmVudCB9LFxuICAgIHsgcGF0aDogJ3RvdXJuYW1lbnQtbGlzdCcsIGNvbXBvbmVudDogSXRlbXNDb21wb25lbnQgfSxcbiAgICAvLyB7IHBhdGg6ICdjYXJkcycsIGNvbXBvbmVudDogQ2FyZHNDb21wb25lbnQgfSxcbiAgICB7IHBhdGg6IFwiaXRlbS86dG91cm5hbWVudF9yZWZcIiwgY29tcG9uZW50OiBJdGVtRGV0YWlsQ29tcG9uZW50IH1cbiAgICAvLyB7IHBhdGg6IFwid2VhdGhlclwiLCBjb21wb25lbnQ6IFdlYXRoZXJNYWluQ29tcG9uZW50IH1cbl07XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW05hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZS5mb3JSb290KHJvdXRlcyldLFxuICAgIGV4cG9ydHM6IFtOYXRpdmVTY3JpcHRSb3V0ZXJNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIEFwcFJvdXRpbmdNb2R1bGUgeyB9Il19